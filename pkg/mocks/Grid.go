// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	point "github.com/complynx/hoppers4apc/pkg/point"
)

// Grid is an autogenerated mock type for the Grid type
type Grid struct {
	mock.Mock
}

type Grid_Expecter struct {
	mock *mock.Mock
}

func (_m *Grid) EXPECT() *Grid_Expecter {
	return &Grid_Expecter{mock: &_m.Mock}
}

// AddBlocked provides a mock function with given fields: p1, p2
func (_m *Grid) AddBlocked(p1 point.Point, p2 point.Point) error {
	ret := _m.Called(p1, p2)

	var r0 error
	if rf, ok := ret.Get(0).(func(point.Point, point.Point) error); ok {
		r0 = rf(p1, p2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Grid_AddBlocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlocked'
type Grid_AddBlocked_Call struct {
	*mock.Call
}

// AddBlocked is a helper method to define mock.On call
//   - p1 point.Point
//   - p2 point.Point
func (_e *Grid_Expecter) AddBlocked(p1 interface{}, p2 interface{}) *Grid_AddBlocked_Call {
	return &Grid_AddBlocked_Call{Call: _e.mock.On("AddBlocked", p1, p2)}
}

func (_c *Grid_AddBlocked_Call) Run(run func(p1 point.Point, p2 point.Point)) *Grid_AddBlocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(point.Point), args[1].(point.Point))
	})
	return _c
}

func (_c *Grid_AddBlocked_Call) Return(_a0 error) *Grid_AddBlocked_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsFinish provides a mock function with given fields: p
func (_m *Grid) IsFinish(p point.Point) bool {
	ret := _m.Called(p)

	var r0 bool
	if rf, ok := ret.Get(0).(func(point.Point) bool); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Grid_IsFinish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFinish'
type Grid_IsFinish_Call struct {
	*mock.Call
}

// IsFinish is a helper method to define mock.On call
//   - p point.Point
func (_e *Grid_Expecter) IsFinish(p interface{}) *Grid_IsFinish_Call {
	return &Grid_IsFinish_Call{Call: _e.mock.On("IsFinish", p)}
}

func (_c *Grid_IsFinish_Call) Run(run func(p point.Point)) *Grid_IsFinish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(point.Point))
	})
	return _c
}

func (_c *Grid_IsFinish_Call) Return(_a0 bool) *Grid_IsFinish_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsInbound provides a mock function with given fields: p
func (_m *Grid) IsInbound(p point.Point) bool {
	ret := _m.Called(p)

	var r0 bool
	if rf, ok := ret.Get(0).(func(point.Point) bool); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Grid_IsInbound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInbound'
type Grid_IsInbound_Call struct {
	*mock.Call
}

// IsInbound is a helper method to define mock.On call
//   - p point.Point
func (_e *Grid_Expecter) IsInbound(p interface{}) *Grid_IsInbound_Call {
	return &Grid_IsInbound_Call{Call: _e.mock.On("IsInbound", p)}
}

func (_c *Grid_IsInbound_Call) Run(run func(p point.Point)) *Grid_IsInbound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(point.Point))
	})
	return _c
}

func (_c *Grid_IsInbound_Call) Return(_a0 bool) *Grid_IsInbound_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsLegalMove provides a mock function with given fields: p
func (_m *Grid) IsLegalMove(p point.Point) bool {
	ret := _m.Called(p)

	var r0 bool
	if rf, ok := ret.Get(0).(func(point.Point) bool); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Grid_IsLegalMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLegalMove'
type Grid_IsLegalMove_Call struct {
	*mock.Call
}

// IsLegalMove is a helper method to define mock.On call
//   - p point.Point
func (_e *Grid_Expecter) IsLegalMove(p interface{}) *Grid_IsLegalMove_Call {
	return &Grid_IsLegalMove_Call{Call: _e.mock.On("IsLegalMove", p)}
}

func (_c *Grid_IsLegalMove_Call) Run(run func(p point.Point)) *Grid_IsLegalMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(point.Point))
	})
	return _c
}

func (_c *Grid_IsLegalMove_Call) Return(_a0 bool) *Grid_IsLegalMove_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewGrid interface {
	mock.TestingT
	Cleanup(func())
}

// NewGrid creates a new instance of Grid. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGrid(t mockConstructorTestingTNewGrid) *Grid {
	mock := &Grid{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
