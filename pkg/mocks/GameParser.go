// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	pkg "github.com/complynx/hoppers4apc/pkg"
	mock "github.com/stretchr/testify/mock"
)

// GameParser is an autogenerated mock type for the GameParser type
type GameParser struct {
	mock.Mock
}

type GameParser_Expecter struct {
	mock *mock.Mock
}

func (_m *GameParser) EXPECT() *GameParser_Expecter {
	return &GameParser_Expecter{mock: &_m.Mock}
}

// SetupGame provides a mock function with given fields:
func (_m *GameParser) SetupGame() (pkg.Grid, pkg.Hopper, error) {
	ret := _m.Called()

	var r0 pkg.Grid
	if rf, ok := ret.Get(0).(func() pkg.Grid); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pkg.Grid)
		}
	}

	var r1 pkg.Hopper
	if rf, ok := ret.Get(1).(func() pkg.Hopper); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(pkg.Hopper)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GameParser_SetupGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupGame'
type GameParser_SetupGame_Call struct {
	*mock.Call
}

// SetupGame is a helper method to define mock.On call
func (_e *GameParser_Expecter) SetupGame() *GameParser_SetupGame_Call {
	return &GameParser_SetupGame_Call{Call: _e.mock.On("SetupGame")}
}

func (_c *GameParser_SetupGame_Call) Run(run func()) *GameParser_SetupGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GameParser_SetupGame_Call) Return(_a0 pkg.Grid, _a1 pkg.Hopper, _a2 error) *GameParser_SetupGame_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

type mockConstructorTestingTNewGameParser interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameParser creates a new instance of GameParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameParser(t mockConstructorTestingTNewGameParser) *GameParser {
	mock := &GameParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
