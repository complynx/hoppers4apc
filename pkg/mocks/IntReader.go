// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IntReader is an autogenerated mock type for the IntReader type
type IntReader struct {
	mock.Mock
}

type IntReader_Expecter struct {
	mock *mock.Mock
}

func (_m *IntReader) EXPECT() *IntReader_Expecter {
	return &IntReader_Expecter{mock: &_m.Mock}
}

// GetCouple provides a mock function with given fields:
func (_m *IntReader) GetCouple() (int, int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IntReader_GetCouple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCouple'
type IntReader_GetCouple_Call struct {
	*mock.Call
}

// GetCouple is a helper method to define mock.On call
func (_e *IntReader_Expecter) GetCouple() *IntReader_GetCouple_Call {
	return &IntReader_GetCouple_Call{Call: _e.mock.On("GetCouple")}
}

func (_c *IntReader_GetCouple_Call) Run(run func()) *IntReader_GetCouple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IntReader_GetCouple_Call) Return(_a0 int, _a1 int, _a2 error) *IntReader_GetCouple_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// GetFour provides a mock function with given fields:
func (_m *IntReader) GetFour() (int, int, int, int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func() int); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 int
	if rf, ok := ret.Get(3).(func() int); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(int)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func() error); ok {
		r4 = rf()
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// IntReader_GetFour_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFour'
type IntReader_GetFour_Call struct {
	*mock.Call
}

// GetFour is a helper method to define mock.On call
func (_e *IntReader_Expecter) GetFour() *IntReader_GetFour_Call {
	return &IntReader_GetFour_Call{Call: _e.mock.On("GetFour")}
}

func (_c *IntReader_GetFour_Call) Run(run func()) *IntReader_GetFour_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IntReader_GetFour_Call) Return(_a0 int, _a1 int, _a2 int, _a3 int, _a4 error) *IntReader_GetFour_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3, _a4)
	return _c
}

// GetOne provides a mock function with given fields:
func (_m *IntReader) GetOne() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntReader_GetOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOne'
type IntReader_GetOne_Call struct {
	*mock.Call
}

// GetOne is a helper method to define mock.On call
func (_e *IntReader_Expecter) GetOne() *IntReader_GetOne_Call {
	return &IntReader_GetOne_Call{Call: _e.mock.On("GetOne")}
}

func (_c *IntReader_GetOne_Call) Run(run func()) *IntReader_GetOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IntReader_GetOne_Call) Return(_a0 int, _a1 error) *IntReader_GetOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewIntReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewIntReader creates a new instance of IntReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIntReader(t mockConstructorTestingTNewIntReader) *IntReader {
	mock := &IntReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
