// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	pkg "github.com/complynx/hoppers4apc/pkg"
	mock "github.com/stretchr/testify/mock"

	point "github.com/complynx/hoppers4apc/pkg/point"
)

// HopperFactory is an autogenerated mock type for the HopperFactory type
type HopperFactory struct {
	mock.Mock
}

type HopperFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *HopperFactory) EXPECT() *HopperFactory_Expecter {
	return &HopperFactory_Expecter{mock: &_m.Mock}
}

// NewHopper provides a mock function with given fields: position
func (_m *HopperFactory) NewHopper(position point.Point) pkg.Hopper {
	ret := _m.Called(position)

	var r0 pkg.Hopper
	if rf, ok := ret.Get(0).(func(point.Point) pkg.Hopper); ok {
		r0 = rf(position)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pkg.Hopper)
		}
	}

	return r0
}

// HopperFactory_NewHopper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewHopper'
type HopperFactory_NewHopper_Call struct {
	*mock.Call
}

// NewHopper is a helper method to define mock.On call
//   - position point.Point
func (_e *HopperFactory_Expecter) NewHopper(position interface{}) *HopperFactory_NewHopper_Call {
	return &HopperFactory_NewHopper_Call{Call: _e.mock.On("NewHopper", position)}
}

func (_c *HopperFactory_NewHopper_Call) Run(run func(position point.Point)) *HopperFactory_NewHopper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(point.Point))
	})
	return _c
}

func (_c *HopperFactory_NewHopper_Call) Return(_a0 pkg.Hopper) *HopperFactory_NewHopper_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewHopperFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewHopperFactory creates a new instance of HopperFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHopperFactory(t mockConstructorTestingTNewHopperFactory) *HopperFactory {
	mock := &HopperFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
